/*(load(pytranslate), 'done);
'done$*/
(kill(all), 'done);
'done$

(preprocess(form) := block(
    ret : regex_subst("m_vars",
      ?\*maxima\-variables\-dictionary\-name\*,
      form),
    ret: regex_subst("m_funcs",
      ?\*maxima\-function\-dictionary\-name\*,
      ret),
    ret: regex_subst("m_vars_l",
      ?\*maxima\-variables\-dictionary\-name\-in\-functions\*,
      ret),
    ret),
  'done);
'done$

/* Atoms  */
pytranslate(1);
"
1"$
pytranslate("sdf");
"
\"sdf\""$
pytranslate(%i);
"
1j"$
pytranslate(%pi);
"
math.pi"$
pytranslate(%e);
"
math.e"$
pytranslate(true);
"
True"$

/* Arithmetic operators */
preprocess(pytranslate(a + b));
"
(m_vars[\"b\"] + m_vars[\"a\"])"$
preprocess(pytranslate(a*b));
"
(m_vars[\"a\"] * m_vars[\"b\"])"$
preprocess(pytranslate(a/b));
"
(m_vars[\"a\"] / m_vars[\"b\"])"$
preprocess(pytranslate(a-b));
"
(m_vars[\"a\"] + (-m_vars[\"b\"]))"$
preprocess(pytranslate(a^b));
"
m_funcs[\"pow\"](m_vars[\"a\"], m_vars[\"b\"])"$
preprocess(pytranslate(a!));
"
m_funcs[\"factorial\"](m_vars[\"a\"])"$

/* Boolean Operators */
preprocess(pytranslate(a or b));
"
(m_vars[\"a\"] or m_vars[\"b\"])"$
preprocess(pytranslate(a and b));
"
(m_vars[\"a\"] and m_vars[\"b\"])"$
preprocess(pytranslate(not(a)));
"
not(m_vars[\"a\"])"$

/* Relational Operators */
preprocess(pytranslate(a >= b));
"
(m_vars[\"a\"] >= m_vars[\"b\"])"$
preprocess(pytranslate(a <= b));
"
(m_vars[\"a\"] <= m_vars[\"b\"])"$
preprocess(pytranslate(a > b));
"
(m_vars[\"a\"] > m_vars[\"b\"])"$
preprocess(pytranslate(a < b));
"
(m_vars[\"a\"] < m_vars[\"b\"])"$
preprocess(pytranslate(a # b));
"
(m_vars[\"a\"] != m_vars[\"b\"])"$
preprocess(pytranslate(a = b));
"
(m_vars[\"a\"] == m_vars[\"b\"])"$

/* List */
preprocess(pytranslate([a,b,c]));
"
[m_vars[\"a\"], m_vars[\"b\"], m_vars[\"c\"]]"$

/* Assignment */
preprocess(pytranslate('(a:b)));
"
m_vars[\"a\"] = m_vars[\"b\"]"$
preprocess(pytranslate('([a,b,c]:[1,2,3])));
"
[m_vars[\"a\"], m_vars[\"b\"], m_vars[\"c\"]] = [1, 2, 3]"$

(kill(allbut(preprocess)), 'done);
'done$

/* Function Definition */
preprocess(pytranslate(f(x):=x^2));
"
def f(x, m_vars_l = m_vars):
    return(m_funcs[\"pow\"](x, 2))"$
preprocess(pytranslate(f(x, [y]):=x^2));
"
def f(x, *y, m_vars_l = m_vars):
    return(m_funcs[\"pow\"](x, 2))"$

(kill(allbut(preprocess)), 'done);
'done$

/* Array-definition */
pytranslate('array(abc, 1, 2, 3));
"
abc = ([([([None] * 3)] * 2)] * 1)"$
pytranslate('array(abc, fixnum, 1, 2, 3));
"
abc = ([([([None] * 3)] * 2)] * 1)"$
pytranslate('array([abc,def,tre], 1, 2, 3));
"

abc = ([([([None] * 3)] * 2)] * 1)
def = ([([([None] * 3)] * 2)] * 1)
tre = ([([([None] * 3)] * 2)] * 1)"$

/* Array reference */
pytranslate('(abc[1,2,3,4]));
"
abc[1][2][3][4]"$

(kill(allbut(preprocess)), 'done);
'done$

/* Block statements */
/* Regex substitution is used to catch the random names generated by gensym and replace them with func_random */
regex_subst("func_random(",
            "func[0-9]*?\\(",
            pytranslate(f(x):=block(a:10, b:x*20, x+a+b)));
"
def func_random(x):
    a = 10
    b = (x * 20)
    return((x + a + b))
def f(x):
    return(func_random(x))"$
regex_subst("func_random(",
            "func[0-9]*?\\(",
            pytranslate('block([a:a, b:b, c:c], d:a+b+c, d)));
"
def func_random(a, b, c):
    d = (a + b + c)
    return(d)
func_random(a, b, c)"$
regex_subst("func_random(",
            "func[0-9]*?\\(",
            pytranslate('block(d:1+2+3, d)));
"
def func_random():
    d = 6
    return(d)
func_random()"$
regex_subst("func_random(",
            "func[0-9]*?\\(",
            pytranslate('block(d:block(c:block(e:20, f:e+10, f), d:d+1+2+3, d), d)));
"
def func_random():
    d = func_random()
    return(d)
def func_random():
    c = func_random()
    d = (6 + d)
    return(d)
def func_random():
    e = 20
    f = (10 + e)
    return(f)
func_random()"$


/* if-else-if */
pytranslate('(if 1>2 then 3 elseif 5>6 then 7 else 8));
"
(3 if (1 > 2) else (7 if (5 > 6) else 8))"$

(kill(allbut(preprocess)), 'done);
'done$

/* Lambda Form */
pytranslate(lambda([a,b], a+b));
"
lambda a, b: (a + b)"$
pytranslate('(xx:lambda([a,b], a+b)));
"
xx = lambda a, b: (a + b)"$
regex_subst("func_random(",
            "func[0-9]*?\\(",
            pytranslate('(lmb:lambda([a,b,c], d:a+b, e:b^c, d+e))));
"
def func_random(a, b, c):
    d = (a + b)
    e = m_funcs[\"pow\"](b, c)
    return((d + e))
lmb = lambda a, b, c: func_random(a, b, c)"$

(kill(allbut(preprocess)), 'done);
'done$

/*for loop*/
/* In List */
pytranslate('(for i in [1,2,3] do print(i)));
"
for i in [1, 2, 3]:
    print(i)"$

pytranslate('(for i in [1,2,3] do (print(i), print(i*2))));
"
for i in [1, 2, 3]:
    print(i)
    print((2 * i))"$

/* Initial, increment and limit values specified */
pytranslate('(for i from 1 step 3 thru 5 do print(i)));
"
for i in range(1, (5 + 1), 3):
    print(i)"$
pytranslate('(for i from 1 step 3 thru 5 do (print(i), a:20+i, print(i*a))));
"
for i in range(1, (5 + 1), 3):
    print(i)
    a = (20 + i)
    print((a * i))"$

/* Initial, increment and condition specified */
/* while condition */
pytranslate('(for i:10 step 5 while i*5<70 do (print(i), print(5*i))));
"

i = 10
while not(((5 * i) >= 70)):
    print(i)
    print((5 * i))
    i = (i + 5)
del i"$
/* unless condition */    
pytranslate('(for i:8 step -1 unless i<3 do (print(i))));
"

i = 8
while not((i < 3)):
    print(i)
    i = (i + -1)
del i"$
pytranslate('(for i:8 step -1 unless i<3 do print(i)));
"

i = 8
while not((i < 3)):
    print(i)
    i = (i + -1)
del i"$

/* Function Calls */
pytranslate(fix(a));
"
math.floor(a)"$
pytranslate('fix(a));
"
math.floor(a)"$
pytranslate(sqrt(a));
"
math.sqrt(a)"$

/* endcons */
pytranslate('endcons(a,b));
"
[*b, a]"$
pytranslate(endcons(a, f(b,c)));
"
f(b, c, a)"$
pytranslate(endcons(a, [d,b,c]));
"
[d, b, c, a]"$

/* Multiple Indentations */
pytranslate('(while cond1 do (while cond2 do (while cond3 do (expr1)))));
"

while cond1:
    
    while cond2:
        
        while cond3:
            expr1"$