(load("pytranslate.lisp"), 'done);
'done$
(kill(all), 'done);
'done$

/* Atoms  */
pytranslate(1);
"1"$
pytranslate("sdf");
"\"sdf\""$
pytranslate(%i);
"1j"$
pytranslate(%pi);
"math.pi"$
pytranslate(%e);
"math.e"$
pytranslate(true);
"True"$

/* Arithmetic operators */
pytranslate(a + b);
"(b + a)"$
pytranslate(a*b);
"(a * b)"$
pytranslate(a/b);
"(a / b)"$
pytranslate(a-b);
"(a + (-b))"$
pytranslate(a^b);
"math.pow(a, b)"$
pytranslate(a!);
"math.factorial(a)"$

/* Boolean Operators */
pytranslate(a or b);
"(a or b)"$
pytranslate(a and b);
"(a and b)"$
pytranslate(not(a));
"not(a)"$

/* Relational Operators */
pytranslate(a >= b);
"(a >= b)"$
pytranslate(a <= b);
"(a <= b)"$
pytranslate(a > b);
"(a > b)"$
pytranslate(a < b);
"(a < b)"$
pytranslate(a # b);
"(a != b)"$
pytranslate(a = b);
"(a == b)"$

/* List */
pytranslate([a,b,c]);
"[a, b, c]"$

/* Assignment */
pytranslate('(a:b));
"a = b"$
pytranslate('([a,b,c]:[1,2,3]));
"[a, b, c] = [1, 2, 3]"$

(kill(all), 'done);
'done$

/* Function Definition */
pytranslate(f(x):=x^2);
"def f(x):
    return(math.pow(x, 2))"$
pytranslate(f(x, [y]):=x^2);
"def f(x, *y):
    return(math.pow(x, 2))"$

(kill(all), 'done);
'done$

/* Array-definition */
pytranslate('array(abc, 1, 2, 3));
"abc = ([([([None] * 3)] * 2)] * 1)"$
pytranslate('array(abc, fixnum, 1, 2, 3));
"abc = ([([([None] * 3)] * 2)] * 1)"$
pytranslate('array([abc,def,tre], 1, 2, 3));
"abc = ([([([None] * 3)] * 2)] * 1)
def = ([([([None] * 3)] * 2)] * 1)
tre = ([([([None] * 3)] * 2)] * 1)"$

/* Array reference */
pytranslate('(abc[1,2,3,4]));
"abc[1][2][3][4]"$

(kill(all), 'done);
'done$

/* Block statements */
/* Regex substitution is used to catch the random names generated by gensym and replace them with func_random */
regex_subst("func_random(",
            "func[0-9]*?\\(",
            pytranslate(f(x):=block(a:10, b:x*20, x+a+b)));
"def func_random(x):
    a = 10
    b = (x * 20)
    return((x + a + b))
def f(x):
    return(func_random(x))"$
regex_subst("func_random(",
            "func[0-9]*?\\(",
            pytranslate('block([a:a, b:b, c:c], d:a+b+c, d)));
"def func_random(a, b, c):
    d = (a + b + c)
    return(d)
func_random(a, b, c)"$
regex_subst("func_random(",
            "func[0-9]*?\\(",
            pytranslate('block(d:1+2+3, d)));
"def func_random():
    d = 6
    return(d)
func_random()"$

/* if-else-if */
pytranslate('(if 1>2 then 3 elseif 5>6 then 7 else 8));
"(3 if (1 > 2) else (7 if (5 > 6) else 8))"$

(kill(all), 'done);
'done$

/* Lambda Form */
pytranslate(lambda([a,b], a+b));
"lambda a, b: (a + b)"$
pytranslate('(xx:lambda([a,b], a+b)));
"xx = lambda a, b: (a + b)"$
regex_subst("func_random(",
            "func[0-9]*?\\(",
            pytranslate('(lmb:lambda([a,b,c], d:a+b, e:b^c, d+e))));
"def func_random(a, b, c):
    d = (a + b)
    e = math.pow(b, c)
    return((d + e))
lmb = lambda a, b, c: func_random(a, b, c)"$

(kill(all), 'done);
'done$

/*for loop*/
/* In List */
pytranslate('(for i in [1,2,3] do print(i)));
"for i in [1, 2, 3]:
    print(i)"$

pytranslate('(for i in [1,2,3] do (print(i), print(i*2))));
"for i in [1, 2, 3]:
    print(i)
    print((2 * i))"$

/* Initial, increment and limit values specified */
pytranslate('(for i from 1 step 3 thru 5 do print(i)));
"for i in range(1, (5 + 1), 3):
    print(i)"$
pytranslate('(for i from 1 step 3 thru 5 do (print(i), a:20+i, print(i*a))));
"for i in range(1, (5 + 1), 3):
    print(i)
    a = (20 + i)
    print((a * i))"$

/* Initial, increment and condition specified */
/* while condition */
pytranslate('(for i:10 step 5 while i*5<70 do (print(i), print(5*i))));
"i = 10
while not(((5 * i) >= 70)):
    print(i)
    print((5 * i))
    i = (i + 5)
del i"$
/* unless condition */    
pytranslate('(for i:8 step -1 unless i<3 do (print(i))));
"i = 8
while not((i < 3)):
    print(i)
    i = (i + -1)
del i"$
pytranslate('(for i:8 step -1 unless i<3 do print(i)));
"i = 8
while not((i < 3)):
    print(i)
    i = (i + -1)
del i"$
