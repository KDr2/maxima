(load(pytranslate), 'done);
'done$
(kill(all), 'done);
'done$

(?\*maxima\-variables\-dictionary\-name\* : "m_vars",
?\*maxima\-function\-dictionary\-name\* : "m_funcs", 'done);
'done$

(preprocess(form) := block(
    ret : regex_subst("m_vars",
      ?\*maxima\-variables\-dictionary\-name\*,
      form),
    ret: regex_subst("m_funcs",
      ?\*maxima\-function\-dictionary\-name\*, ret),
    ret: regex_subst("block_random(",
            "block[0-9]*?\\(",
            ret),
	  ret: regex_subst("lambda_random(",
            "lambda[0-9]*?\\(",
            ret),
          ret),
  'done);
'done$

/* Atoms  */
pytranslate(1);
"
1"$
pytranslate("sdf");
"
\"sdf\""$
pytranslate(%i);
"
1j"$
pytranslate(%pi);
"
math.pi"$
pytranslate(%e);
"
math.e"$
pytranslate(true);
"
True"$

/* Arithmetic operators */
preprocess(pytranslate(a + b));
"
(m_vars[\"b\"] + m_vars[\"a\"])"$
preprocess(pytranslate(a*b));
"
(m_vars[\"a\"] * m_vars[\"b\"])"$
preprocess(pytranslate(a/b));
"
(m_vars[\"a\"] / m_vars[\"b\"])"$
preprocess(pytranslate(a-b));
"
(m_vars[\"a\"] + (-m_vars[\"b\"]))"$
preprocess(pytranslate(a^b));
"
m_funcs[\"pow\"](m_vars[\"a\"], m_vars[\"b\"])"$
preprocess(pytranslate(a!));
"
m_funcs[\"factorial\"](m_vars[\"a\"])"$

/* Boolean Operators */
preprocess(pytranslate(a or b));
"
(m_vars[\"a\"] or m_vars[\"b\"])"$
preprocess(pytranslate(a and b));
"
(m_vars[\"a\"] and m_vars[\"b\"])"$
preprocess(pytranslate(not(a)));
"
not(m_vars[\"a\"])"$

/* Relational Operators */
preprocess(pytranslate(a >= b));
"
(m_vars[\"a\"] >= m_vars[\"b\"])"$
preprocess(pytranslate(a <= b));
"
(m_vars[\"a\"] <= m_vars[\"b\"])"$
preprocess(pytranslate(a > b));
"
(m_vars[\"a\"] > m_vars[\"b\"])"$
preprocess(pytranslate(a < b));
"
(m_vars[\"a\"] < m_vars[\"b\"])"$
preprocess(pytranslate(a # b));
"
(m_vars[\"a\"] != m_vars[\"b\"])"$
preprocess(pytranslate(a = b));
"
(m_vars[\"a\"] == m_vars[\"b\"])"$

/* List */
preprocess(pytranslate([a,b,c]));
"
[m_vars[\"a\"], m_vars[\"b\"], m_vars[\"c\"]]"$

/* Assignment */
preprocess(pytranslate('(a:b)));
"
m_vars[\"a\"] = m_vars[\"b\"]"$
preprocess(pytranslate('([a,b,c]:[1,2,3])));
"
[m_vars[\"a\"], m_vars[\"b\"], m_vars[\"c\"]] = [1, 2, 3]"$

(kill(allbut(preprocess)), 'done);
'done$

/* Function Definition */
preprocess(pytranslate(f(x):=x^2));
"
def f(x, m_vars = HierarchialDict({}, m_vars)):
    m_vars.ins({\"x\" : x})
    return(m_funcs[\"pow\"](m_vars[\"x\"], 2))"$
preprocess(pytranslate(f(x, [y]):=[x, y]));
"
def f(x, *y, m_vars = HierarchialDict({}, m_vars)):
    m_vars.ins({\"x\" : x, \"y\" : list(y)})
    return([m_vars[\"x\"], m_vars[\"y\"]])"$

(kill(allbut(preprocess)), 'done);
'done$

/* Array-definition */
preprocess(pytranslate('array(abc, 1, 2, 3)));
"
m_vars[\"abc\"] = ([([([None] * 3)] * 2)] * 1)"$
preprocess(pytranslate('array(abc, fixnum, 1, 2, 3)));
"
m_vars[\"abc\"] = ([([([None] * 3)] * 2)] * 1)"$
preprocess(pytranslate('array([abc,def,tre], 1, 2, 3)));
"

m_vars[\"abc\"] = ([([([None] * 3)] * 2)] * 1)
m_vars[\"def\"] = ([([([None] * 3)] * 2)] * 1)
m_vars[\"tre\"] = ([([([None] * 3)] * 2)] * 1)"$

/* Array reference */
preprocess(pytranslate('(abc[1,2,3,4])));
"
m_vars[\"abc\"][1][2][3][4]"$

(kill(allbut(preprocess)), 'done);
'done$

/* Block statements */
/* Regex substitution is used to catch the random names generated by gensym and replace them with func_random */
preprocess(pytranslate(f(x):=block(a:10, b:x*20, x+a+b)));
"
def f(x, m_vars = HierarchialDict({}, m_vars)):
    m_vars.ins({\"x\" : x})
    m_vars.ins({})
    m_vars[\"a\"] = 10
    m_vars[\"b\"] = (m_vars[\"x\"] * 20)
    return((m_vars[\"x\"] + m_vars[\"a\"] + m_vars[\"b\"]))"$

(?\*symbols\-directly\-convert\*:[], 'done);
'done$
preprocess(pytranslate('(block(d : block(c : block(e : 20, f : e + 10, f), c : c + 1 + 2 + 3, c), d))));
"
def block_random(m_vars):
    m_vars.ins({})
    m_vars[\"d\"] = block_random(HierarchialDict({}, m_vars))
    return(m_vars[\"d\"])
def block_random(m_vars):
    m_vars.ins({})
    m_vars[\"c\"] = block_random(HierarchialDict({}, m_vars))
    m_vars[\"c\"] = (6 + m_vars[\"c\"])
    return(m_vars[\"c\"])
def block_random(m_vars):
    m_vars.ins({})
    m_vars[\"e\"] = 20
    m_vars[\"f\"] = (10 + m_vars[\"e\"])
    return(m_vars[\"f\"])
block_random(HierarchialDict({}, m_vars))"$


/* if-else-if */
preprocess(pytranslate('(if 1>2 then z:10)));
"

if (1 > 2):
    m_vars[\"z\"] = 10"$
preprocess(pytranslate('(if 1>2 then z:10 else z:30)));
"

if (1 > 2):
    m_vars[\"z\"] = 10
else:
    m_vars[\"z\"] = 30"$
preprocess(pytranslate('(if 1>2 then z:10 elseif 1<2 then z:30 else z:40)));
"

if (1 > 2):
    m_vars[\"z\"] = 10
elif (1 < 2):
    m_vars[\"z\"] = 30
else:
    m_vars[\"z\"] = 40"$
pytranslate('(f(x):=if x>2 then 10 elseif x<2 then 30 else 40));
"
def f(x, m_vars = HierarchialDict({}, m_vars)):
    m_vars.ins({\"x\" : x})
    return((10 if (m_vars[\"x\"] > 2) else (30 if (m_vars[\"x\"] < 2) else 40)))"$

(?\*symbols\-directly\-convert\*:[], 'done);
'done$
(kill(allbut(preprocess)), 'done);
'done$

/* Lambda Form */
pytranslate(lambda([a,b], a+b));
"
lambda a, b, m_vars = HierarchialDict({}, m_vars): (a + b)"$
pytranslate('(xx:lambda([a,b], a+b)));
"
m_vars[\"xx\"] = lambda a, b, m_vars = HierarchialDict({}, m_vars): (a + b)"$
preprocess(pytranslate('(lmb:lambda([a,b,c], d:a+b, e:b^c, d+e))));
"
def lambda_random(a, b, c, m_vars = HierarchialDict({}, m_vars)):
    m_vars.ins({\"a\" : a, \"b\" : b, \"c\" : c})
    m_vars[\"d\"] = (a + b)
    m_vars[\"e\"] = m_funcs[\"pow\"](b, c)
    return((m_vars[\"d\"] + m_vars[\"e\"]))
m_vars[\"lmb\"] = lambda a, b, c, m_vars = HierarchialDict({}, m_vars): lambda_random(a, b, c, HierarchialDict({}, m_vars))"$

(kill(allbut(preprocess)), 'done);
'done$

/*for loop*/
/* In List */
pytranslate('(for i in [1,2,3] do print(i)));
"
for m_vars[\"i\"] in [1, 2, 3]:
    m_funcs[\"print\"](m_vars[\"i\"])"$

pytranslate('(for i in [1,2,3] do (print(i), print(i*2))));
"
for m_vars[\"i\"] in [1, 2, 3]:
    m_funcs[\"print\"](m_vars[\"i\"])
    m_funcs[\"print\"]((2 * m_vars[\"i\"]))"$

/* Initial, increment and limit values specified */
pytranslate('(for i from 1 step 3 thru 5 do print(i)));
"
for m_vars[\"i\"] in range(1, (5 + 1), 3):
    m_funcs[\"print\"](m_vars[\"i\"])"$
pytranslate('(for i from 1 step 3 thru 5 do (print(i), a:20+i, print(i*a))));
"
for m_vars[\"i\"] in range(1, (5 + 1), 3):
    m_funcs[\"print\"](m_vars[\"i\"])
    m_vars[\"a\"] = (20 + m_vars[\"i\"])
    m_funcs[\"print\"]((m_vars[\"a\"] * m_vars[\"i\"]))"$

/* Initial, increment and condition specified */
/* while condition */
pytranslate('(for i:10 step 5 while i*5<70 do (print(i), print(5*i))));
"

m_vars[\"i\"] = 10
while not(((5 * m_vars[\"i\"]) >= 70)):
    m_funcs[\"print\"](m_vars[\"i\"])
    m_funcs[\"print\"]((5 * m_vars[\"i\"]))
    m_vars[\"i\"] = (m_vars[\"i\"] + 5)
del m_vars[\"i\"]"$
/* unless condition */    
pytranslate('(for i:8 step -1 unless i<3 do (print(i))));
"

m_vars[\"i\"] = 8
while not((m_vars[\"i\"] < 3)):
    m_funcs[\"print\"](m_vars[\"i\"])
    m_vars[\"i\"] = (m_vars[\"i\"] + -1)
del m_vars[\"i\"]"$
pytranslate('(for i:8 step -1 unless i<3 do print(i)));
"

m_vars[\"i\"] = 8
while not((m_vars[\"i\"] < 3)):
    m_funcs[\"print\"](m_vars[\"i\"])
    m_vars[\"i\"] = (m_vars[\"i\"] + -1)
del m_vars[\"i\"]"$

/* Function Calls */
pytranslate(fix(a));
"
math.floor(m_vars[\"a\"])"$
pytranslate('fix(a));
"
math.floor(m_vars[\"a\"])"$
pytranslate(sqrt(a));
"
math.sqrt(m_vars[\"a\"])"$

/* endcons */
preprocess(pytranslate('endcons(a,b)));
"
[*m_vars[\"b\"], m_vars[\"a\"]]"$
pytranslate(endcons(a, f(b,c)));
"
m_funcs[\"f\"](m_vars[\"b\"], m_vars[\"c\"], m_vars[\"a\"])"$
pytranslate(endcons(a, [d,b,c]));
"
[m_vars[\"d\"], m_vars[\"b\"], m_vars[\"c\"], m_vars[\"a\"]]"$

/* Multiple Indentations */
preprocess( pytranslate('(for i:5 step 0 while i>=1 do
    ((for j from i step 0 while j>=1 do
    	 ((for k from j step 0 while k>=1 do
	      (print(k,j,i),
	      k:k-1)),
	  j:j-1)),
    i:i-1))));
"

m_vars[\"i\"] = 5
while not((m_vars[\"i\"] < 1)):
    
    m_vars[\"j\"] = m_vars[\"i\"]
    while not((m_vars[\"j\"] < 1)):
        
        m_vars[\"k\"] = m_vars[\"j\"]
        while not((m_vars[\"k\"] < 1)):
            m_funcs[\"print\"](m_vars[\"k\"], m_vars[\"j\"], m_vars[\"i\"])
            m_vars[\"k\"] = (-1 + m_vars[\"k\"])
            m_vars[\"k\"] = (m_vars[\"k\"] + 0)
        del m_vars[\"k\"]
        m_vars[\"j\"] = (-1 + m_vars[\"j\"])
        m_vars[\"j\"] = (m_vars[\"j\"] + 0)
    del m_vars[\"j\"]
    m_vars[\"i\"] = (-1 + m_vars[\"i\"])
    m_vars[\"i\"] = (m_vars[\"i\"] + 0)
del m_vars[\"i\"]"$