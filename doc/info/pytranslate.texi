@menu
* Introduction to pytranslate::
* Functions in pytranslate::
@end menu

@node Introduction to pytranslate, Functions in pytranslate, Top, Top
@section Introduction to pytranslate

@code{pytranslate} package provides Maxima to Python translation functionality. The package is experimental, and the specifications of the functions in this package might change. It was written as a Google Summer of Code project by Lakshya A Agrawal(Undergraduate Student, Indraprastha Institute of Information Technology, Delhi) in 2019.@*

The package needs to be loaded in a Maxima instance for use, by executing @code{load(pytranslate);}@*
The statements are converted to Python 3 syntax.

Example:
@c ===beg===
@c load (pytranslate)$
@c /* Define an example function to calculate factorial */
@c pytranslate(my_factorial(x) := if x = 1 then 1 else x*my_factorial(x - 1));
@c my_factorial(5);
@c ===end===
@example
@group
(%i1) load (pytranslate)$
/* Define a function to calculate factorial */
(%i2) pytranslate(my_factorial(x) := if x = 1 then 1 else x*my_factorial(x - 1));
(%o2) def my_factorial(x):
    return((1 if (x == 1) else (x * my_factorial((x + (-1))))))
(%i3) my_factorial(5);
(%o3)                          120
@end group
@group
$ python3
Python 3.6.8
Type "help", "copyright", "credits" or "license" for more information.
>>> def my_factorial(x):
...     return((1 if (x == 1) else (x * my_factorial((x + (-1))))))
... 
>>> my_factorial(5)
120
@end group
@end example

The Maxima to Python Translator works in two stages:@*
1. Conversion of the internal Maxima representation to a defined Intermediate Representation(mapping is present in @file{share/pytranslate/maxima-to-ir.html})@*
2. The conversion of IR to Python.

Supported Maxima forms:@*
1. @mref{Numbers}(including complex numbers)@*
2. @mref{Assignment operators}@*
3. @mref{Arithmetic operators}(+, -, *, ^, /, !)@*
4. @mref{Logical operators}(and, or, not)@*
5. @mref{Relational operators}(>, <, >=, <=, !=, ==)@*
6. @mref{Lists}@*
7. @mref{Arrays}@*
8. @mref{block}@*
9. @mref{Function} and function calls@*
10. @mref{if}-else converted to Python conditionals@*
11. @mref{for} loops@*
12. @mref{lambda} form.

@subsection Tests for pytranslate
The tests for @code{pytranslate} are present at @file{share/pytranslate/rtest_pytranslate.mac} and can be run by executing @code{batch(rtest_pytranslate, test);}.

@node Functions in pytranslate, , Introduction to pytranslate, Top
@section Functions in pytranslate

@deffn {Function} pytranslate (@var{expr})
Translates the expression @var{expr} to equivalent Python 3 Statements. Output is printed in the standard output.

Example:
@c ===beg===
@c load (pytranslate)$
@c pytranslate('(for i:8 step -1 unless i<3 do (print(i))));
@c ===end===
@example
@group
(%i1) load (pytranslate)$
/* Loop from 8 down to 3 */
(%i2) pytranslate('(for i:8 step -1 unless i<3 do (print(i))));
(%o2) i = 8
while not((i < 3)):
    print(i)
    i = (i + -1)
del i
(%i3) for i:8 step -1 unless i<3 do (print(i));
8 
7 
6 
5 
4 
3
(%o3)                                done
@end group
@group
python3
Python
Type "help", "copyright", "credits" or "license" for more information.
>>> i = 8
>>> while not((i < 3)):
...     print(i)
...     i = (i + -1)
... 
8
7
6
5
4
3
>>> del i
@end group
@end example

@var{expr} is evaluated, and the return value is used for translation. Hence, for statements like assignment, it might be useful to qoute the statement:
@c ===beg===
@c load (pytranslate)$
@c pytranslate(x:20);
@c pytranslate('(x:20));
@c ===end===
@example
(%i1) load (pytranslate)$
(%i2) pytranslate(x:20);
(%o2)                          20
(%i3) pytranslate('(x:20));
(%o3)                        x = 20
@end example

@mref{block} statements are converted to a separate python function(name generated by @mref{gensym}) containing all the expressions. Therefore, @mref{block} expressions using local variables are expected. For accessing values of global variables, they must be exclusively passed to the @mref{block} expression in a list as a first argument.
Example:
@c ===beg===
@c load (pytranslate)$
@c pytranslate('(a:10));
@c pytranslate('block([a_local:a], a_local+10));
@c ===end===
@example
(%i1) load (pytranslate)$
(%i2) pytranslate('(a:10));
(%o2)                        a = 10
(%i3) pytranslate('block([a_local:a], a_local+10));
(%o3) def func16956(a_local):
    return((10 + a_local))
func16956(a)
@end example
@end deffn

