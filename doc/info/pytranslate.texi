@menu
* Introduction to pytranslate::
* Functions in pytranslate::
@end menu

@node Introduction to pytranslate, Functions in pytranslate, Top, Top
@section Introduction to pytranslate

@code{pytranslate} package provides Maxima to Python translation functionality. The package is experimental, and the specifications of the functions in this package might change. It was written as a Google Summer of Code project by Lakshya A Agrawal(Undergraduate Student, Indraprastha Institute of Information Technology, Delhi) in 2019.@*

The package needs to be loaded in a Maxima instance for use, by executing @code{load(pytranslate);}@*
The statements are converted to python3 syntax. The file pytranslate.py must be imported for all translations to run, as shown in example.

Example:
@c ===beg===
@c load (pytranslate)$
@c /* Define an example function to calculate factorial */
@c pytranslate(my_factorial(x) := if (x = 1 or x = 0) then 1 else x * my_factorial(x - 1));
@c my_factorial(5);
@c ===end===
@example
(%i1) load (pytranslate)$
@group
/* Define an example function to calculate factorial */
(%i2) pytranslate(my_factorial(x) := if (x = 1 or x = 0) then 1 else x * my_factorial(x - 1));
(%o2) 
def my_factorial(x, v = v):
    v = Stack(@{@}, v)
    v.ins(@{"x" : x@})
    return((1 if ((v["x"] == 1) or (v["x"] == 0)) else (v["x"] * my_factorial((v["x"] + (-1))))))
m["my_factorial"] = my_factorial
@end group
@group
(%i3) my_factorial(5);
(%o3)                          120
@end group
@group
>>> from pytranslate import *
>>> def my_factorial(x, v = v):
...     v = Stack({}, v)
...     v.ins({"x" : x})
...     return((1 if ((v["x"] == 1) or (v["x"] == 0)) else (v["x"] * my_factorial((v["x"] + (-1))))))
... 
>>> my_factorial(5)
120
@end group
@end example

The Maxima to Python Translator works in two stages:@*
1. Conversion of the internal Maxima representation to a defined Intermediate Representation(mapping is present in @file{share/pytranslate/maxima-to-ir.html})@*
2. The conversion of IR to Python.

Supported Maxima forms:@*
1. @mref{Numbers}(including complex numbers)@*
2. @mref{Assignment operators}@*
3. @mref{Arithmetic operators}(+, -, *, ^, /, !)@*
4. @mref{Logical operators}(and, or, not)@*
5. @mref{Relational operators}(>, <, >=, <=, !=, ==)@*
6. @mref{Lists}@*
7. @mref{Arrays}@*
8. @mref{block}@*
9. @mref{Function} and function calls@*
10. @mref{if}-else converted to Python conditionals@*
11. @mref{for} loops@*
12. @mref{lambda} form

@subsection Tests for pytranslate
The tests for @code{pytranslate} are present at @file{share/pytranslate/rtest_pytranslate.mac} and can be run by executing @code{batch(rtest_pytranslate, test);}.

@node Functions in pytranslate, , Introduction to pytranslate, Top
@section Functions in pytranslate

@deffn {Function} pytranslate (@var{expr}, [@optional{print-ir}])
Translates the expression @var{expr} to equivalent Python 3 Statements. Output is printed in the standard output.

Example:
@c ===beg===
@c load (pytranslate)$
@c pytranslate('(for i:8 step -1 unless i<3 do (print(i))));
@c ===end===
@example
(%i1) load (pytranslate)$
@group
(%i2) pytranslate('(for i:8 step -1 unless i<3 do (print(i))));
(%o2) 
v["i"] = 8
while not((v["i"] < 3)):
    m["print"](v["i"])
    v["i"] = (v["i"] + -1)
del v["i"]
@end group
@end example

@var{expr} is evaluated, and the return value is used for translation. Hence, for statements like assignment, it might be useful to qoute the statement:
@c ===beg===
@c load (pytranslate)$
@c pytranslate(x:20);
@c pytranslate('(x:20));
@c ===end===
@example
(%i1) load (pytranslate)$
@group
(%i2) pytranslate(x:20);
(%o2) 
20
@end group
@group
(%i3) pytranslate('(x:20));
(%o3) 
v["x"] = 20
@end group
@end example

Passing the second optional parameter @var{print-ir} to @code{pytranslate} as t, will print the internal IR representation for expr and return the translated Python3 code.

@c ===beg===
@c load(pytranslate);
@c pytranslate('(plot3d(lambda([x, y], x^2 + y^(-1)), [x, 1, 10], [y, 1, 10])), t);
@c ===end===
@example
@group
(%i1) load(pytranslate);
(%o1) /home/philo/Documents/Self/maxima/translator/u-philomath-m\
axima_translate/share/pytranslate/pytranslate.mac
@end group
@group
(%i2) pytranslate('(plot3d(lambda([x, y], x^2 + y^(-1)), [x, 1, 10], [y, 1, 10])), t);
(body
 (funcall (element-array "m" (string "plot3d"))
  (lambda ((symbol "x")
           (symbol "y")
           (op-no-bracket = (symbol "v") (funcall (symbol "stack") (dictionary) (symbol "v"))))
   (op + (funcall (element-array (symbol "m") (string "pow")) (symbol "x") (num 2 0))
         (funcall (element-array (symbol "m") (string "pow")) (symbol "y") (unary-op - (num 1 0)))))
  (struct-list (string "x") (num 1 0) (num 10 0))
  (struct-list (string "y") (num 1 0) (num 10 0)))) 
(%o2) 
m["plot3d"](lambda x, y, v = Stack(@{@}, v): (m["pow"](x, 2) + m["pow"](y, (-1))),
            ["x", 1, 10],
            ["y", 1, 10])
@end group
@end example
